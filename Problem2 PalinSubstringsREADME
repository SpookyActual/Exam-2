Given a string, your task is to count how many palindromic substrings in this string. 
The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters. 

      /*Identify the problem: A string is given, it must be determined how many substrings are palindromes. REcursion will be helpful in examing each character of the string as a "starting point."
       *Define the goal, understand that a single character is technically a palindrome, so each singular character from a substring must be counted, and from there figure out how to track substrings that are palindromic and multi-character. 
       *Explore solutions, count all characters as palindromic, then have pointers that move outward from each other and compare if characters are similar, returning 1 or 0 to add to a counter, a counter being all that is necessary to store information to accomplish goal.
       *Anticipating outcomes and Acting, ensure that the pointers move outward from every possible point in the string to guarantee that all possible palindromes are accounted for.
       *Looking and Learning, while a brute force solution of exploring the string by middle-out iteration and recursion, this solution is still efficient and learning that while a problem may sound lengthy, most of the time it's a matter of adding a 1 or 0 through a simple check.
       */
